//                                                  Модули

// JS модули - нужны чтобы делать экспорт и импорт, чтобы подключать разные фаилы друг в друга

// Модули не поддерживаются браузером по умолчанию, но можно использовать сборщики, чтобы собрать все в 1 фаил для исполнения; Node.js поддерживает по умолчаию

// CommonJS - формат подходит чтобы использовать с Node.js, не подходит для браузера
// ES6 Modulies - формат подходит для сборки, чтобы использовать ее в браузере



//                                              CommonJS модули

// 1. import - чтобы подключить какой-то фаил в текущий, просто нужно использовать команду require. Можно подключать например встроенные утилиты nodeJS (nodeJS utils), можно подключать пакеты с репотория npm (npm pakeges), либо наши кастомные модули (custom modules)

// a) nodeJS utils. Для подключения встроенной утилиты понадобится переменная в которую будет сделан импорт через require. С путем не нужно заморачиваться, дстаточно передать строку с именем утилиты
const fs = require('fs'); // подключаем в переменную встроенную утилиту nodeJS 'fs' для работы с фаилами
console.log(fs); //=> вернет объект с кучей функций

// b) npm pakeges. Для подключения пакетов с репозитория npm нужен инициализированный фаил package.json, тогда мы сможем установить через команду, например Реакт `$ npm install react`, тогда появятся зависимость которая попадет в папку `node_modules` в нашем проекте и удет можно импортировать тем же способом что и в nodeJS utils
const React = require('react'); // тк путь не указан то спева будет искато в `nodeJS utils` и если не найдет тогда будет искать пакет в папке `node_modules` и тогда уже если не найдет, то выдаст ошибку
console.log(React);

// c) custom modules. Если подключаем свои модули(свои фаилы) то сперва нужно будет сделать экспорт этого фаила и только потом его подключить. При подключении своего модуля обязательно указывать путь.
const hello = require('./test2'); // подключаем test2.js по относительному пути


// 2. export:
// module.exports - позволяет нам экспортировать какую-то сущность как ключ в передаваемом объекте (переменную, функцию, класс)

// a) Например в фаиле из которого экспортируем (test2.js)
function sayHello() {
  console.log('hello');
}
module.exports = { sayHello }; // gtпередаем функцию по ее имени как ключ в объекте

// b) Импортируем ее в фаиле test1.js и вызываем от плученного объекта
const hello = require('./test2');
console.log(hello); //=> { sayHello: [Function: sayHello] }
hello.sayHello();   //=> 'hello'

// c) Импортируем ее в фаиле test1.js и сразу делаем деструктуризацию объекта, чтобы вызывать без привязки к объекту
const { sayHello } = require('./test2');
sayHello(); //=> 'hello'

// d) Можно сразу экспортировать просто функцию (или класс) без объекта, например если надо экспортировать только 1 функцию (или класс). Тоесть перезаписываем module.exports и там вместо объекта будет просто функция
// test2.js:
module.exports = () => {
  console.log('hello');
};
// test1.js:
const hello = require('./test2');
console.log(hello); //=> [Function (anonymous)]
hello(); //=> 'hello'

// e) exports - можно дополнительно использовать вместе с module.exports объектом, пишется c ключем в который присваивается функция, чтобы добавить ее в объект module.exports. Но через этот синтаксис нельзя передавать функции и классы без объекта
// test2.js:
exports.hello = function sayHello() { // exports передает функцию в объект module.exports
  console.log('hello');
}
// test1.js:
const hello = require('./test2');
console.log(hello); //=> { hello: [Function: sayHello] }



//                                                 ES6 модули



//                                                export import

// Экспорт переменной из фаила, например file1.js, чтобы ее можно было передать в другие фаилы
export const foo = 'bar';

// Импорт экспортированной переменной в фаил, например в file2.js
import { foo } from 'src/components/file1'; // 'src/components/file1' - путь к фаилу из которого импортируем
console.log(foo); //=> bar



//                                             Модульная система в JS

// JS файлы автоматом оборачиваются в модуль, в новом синтаксе это идёт под капотом

// Если есть конфликт имен, в строке получения можно дать методу певдоним
import { method1 : bigMethos } from './file.js'


// Если нужно экспортировать несколько переменных, методов итд, то можно обернуть их в объект:
// 1. В фаиле из которого экспортируем, например file1.js
module.exports = {
  foo: 'bar'
};
// 2. В фаиле в который импортируем, например file2.js
const data = require('./file1');
console.log(data.foo); //=> bar



//                                                   Разное

// Если нужно только несколько методов из библиотеки, то можно только их и запрашиваешь, чтобы не нести всю библиотеку в проэкт
import { m1, m2 } from 'lib';













//
