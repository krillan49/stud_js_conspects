//                             Создание таймеров и интервалов(setTimeout и setInterval)

// В JavaScript есть две функции(setTimeout и setInterval), которые позволяют вызывать другие функции через определенное количество времени.



//                                                setInterval()

// Интервалы вызывают функцию периодически, каждое определенное количество секунд

// setInterval() - всстроенная функция-интервал принимает функцию и число милисекунд (1/1000 секунды). Функцию модно передать в виде строки, например "someFunction()", в виде переменной, например someFunction, либо передать сам код функции.


// Будет вызвана функция someFunction через 1 секунду
setInterval("someFunction()", 1000);
// "someFunction()" либо someFunction - имя функции которую будем запускать
// 1000 - время в милисекундах, через которое будет вызываться функция
function someFunction() {
	console.log("Функция срабатывает каждую секунду"); // данное сообщение будет выводится каждую секунду
}


// С функций в качестве первого параметра, чтобы не писать ее отдельно
let counter = 0;
setInterval(function() { // анонимная функция тк название нам тут не нужно
  counter++;
  console.log('Прошло ' + counter + ' секунд');
}, 1000); // 2й параметр так же указываем через запятую после функции


// Чтобы остановить интервал его необходимо записать в переменную, после чего очистить данные методом clearInterval:
let int = setInterval(someFunction, 1500);
let counter = 0;
function someFunction() {
  counter++;
	console.log("Функция срабатывает каждые 1,5 секунды");
  if (counter == 3) clearInterval(int); // метод для остановки интервала переданного в параметр
}



//                                               setTimeout()

// Таймер вызывает функцию всего один раз, после чего прекращает свою работу, соотв таймер не нужно останавливать

// setTimeout() - всстроенная функция таймера

setTimeout(simple, 1500); // варианты записи те же
function simple() {
	alert("Функция будет вызвана лишь один раз через 1.5 секунды после старта программы");
}












//
