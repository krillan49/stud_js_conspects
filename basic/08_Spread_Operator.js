//                                             Spread Operator

// Spread Operator / Rest Operator - позволяет расширить выражение в тех местах, где ожидается несколько аргументов (для вызовов функций) или несколько элементов (для литералов массива)

// Его можно использовать в:



//                                            Параметры функций

// Позволяет представлять неопределенное количество аргументов в виде массива, если аргументы не будут переданы то это будет пустой массив
function plus(...num){
  return num;
}
console.log(plus(3,4,5)); //=> [ 3, 4, 5 ]

// Можно начинать его с любого из переданных аргументов
function mul(a, ...b){
  return b;
}
console.log(mul(0,1,2,3,4)); //=> [ 1, 2, 3, 4 ]



//                                       Аргументы в операторах фукций

// При вызовах функций:
function plus(a, b, c, d, e){
  return a + b + c + d + e;
}
let arg1 = [1,2,3,4,5], arg2 = [2,3];
console.log(plus(...arg1));          //=> 15  // ...arg1 распределяет все элементы arg1 по отдельным параметрам в plus()
console.log(plus(1, ...arg2, 4, 5)); //=> 15  // также можно использовать оператор расширения в середине списка параметров
console.log(plus(...arg1, ...arg2)); //=> 15  // лишние параметры просто не используются



//                                     Создание элементов массива из массива

// Создание литералов массива:
let arr = [1, 2, 3];
let res = [...arr, 4, 5];
// ...arr распределяет элементы массива, делая их отдельными элементами в res.
console.log(res);          //=> [ 1, 2, 3, 4, 5 ]
let res2 = [...arr, 7, ...arr];
console.log(res2);         //=> [ 1, 2, 3, 7, 1, 2, 3 ]



//                                    Создание элементов массива из сроки

[...'abc'] //=> ['a', 'b', 'c']



//                                          Деконструкция, деструктуризация

// (подробнее в разделе массивов) Оператор распространения для деструктуризации
let [a, ...b] = [1, 2, 3, 4, 5];
console.log(a); //=> 1
console.log(b); //=> [ 2, 3, 4, 5 ]



//                                              Свойства объектов

const obj1 = { name: 'Anna', x: 20 }
const obj2 = { name: 'Boris', y: 99 }

// 1. Можно сконировать копию объекта (тк при простом присвоении в другую переменную, просто будет еще одна ссылка на тот же объект)
const obj1Clone = { ...obj1 } // этот объект будет иметь такие же поля и их значения как и obj1
console.log(obj1Clone);          //=> { name: 'Anna', x: 20 }

// 2. Можно создать объект объединяющий свойства других объектов. Записывает свойства по порядку и если будут одинаковые свойства, то каждый раз перезапишет значение и оно будет как у последнего объекта
const objMerged = { ...obj1, ...obj2 }
console.log(objMerged);          //=> { name: 'Boris', x: 20, y: 99 }















//
