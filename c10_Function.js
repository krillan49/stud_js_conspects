//                                                 Функции

// Функции что записаны вне классов называют функциями, а функции что записаны внутри классов называются методами
// В теле функции можно писать условия, циклы, вызов функций, любые операции, единственное что нельзя так это определение функции

function test() {
  // function - ключевое слово для создания функции
  // test() - название функции, в названии нельзя использовать спец символы. () - обязательно даже без параметров
  // {} - обязательно, нет сокращений для 1й строчки кода
	console.log("Вывод чего-либо в консоль");
  console.log("Вывод еше чегото");
}
test(); // Вызов функции, чтобы она отработала
test(); // Можно вызывать многократно


// Функции с параметрами
function test2(word=0) { //  =0  значение по умолчанию
	console.log(word + '!');
}
test2(); //=> 0!
test2('Kroker'); //=> Kroker!
test2(6); //=> 6!
test2(5.5); //=> 5.5!
test2(true); //=> true!

function summa(a, b) {
  var res = a + b;
  console.log(res); //=> 12
}
summa(5, 7);


// Вызов одной функции внутри тела другой
function summa2(a, b) {
  var res = a + b;
  test2(res); //=> 12!
}
summa2(5, 7);


// Пример с массивом
function arr_sum(arr) {
  var sum = 0;
  for (var i = 0; i < arr.length; i++) {
    sum += arr[i];
  }
  console.log(sum) //=> 15
}
var arr = [6, 8, 1]; // придется сперва определить
arr_sum(arr);



//                                                 return

function return_test(some_number) {
	some_number *= 2;
	return some_number; // возвращаем результат к оператору вызова, например чтобы поместить его в переменную
}
var res = return_test(6); // теперь в переменной будет 12
console.log('Result: ' + res); //=> Result: 12


// Возврат без переменной
function check(a, x){
  return a.includes(x);
}
var a = [6, 8, 1, 'a'];
check(a, 8); //=> true



//                                      Локальные и глобальные переменные

// В JavaScript есть несколько полей видимости: локальная и глобальная. Глобальная переменная видна повсюду и с ней можно работать отовсюду в документе. Локальная переменная видна лишь в той области, где она записана.

var num = 10; // Данная переменная будет глобальной, тк определена вне функциями

function info() {
  var num2 = 5; // Данная переменная будет локальной, тк определена в теле функции
  console.log(num); // глобальная переменная работает и внутри функций
  console.log(num2); // локальная переменная работает только внутри функции в которой определена
}
info();
console.log(num2); // Uncaught ReferenceError: num2 is not defined


// Фича
var num = 10;
function info() {
  var num = 5;      // Присваиваем в переменную с тем же именем
  console.log(num); // тут сработает для локальной
	return num;
}
info(); // тут сработает для локальной
console.log(num); // тут сработает для глобальной



//                                             => Функции в ону строку

var ArrowFunc = (arr) => arr.map( n => String.fromCharCode(n) ).join('');
// n каждый элемент массива arr

console.log([1,2,3].map(x=>Math.pow(x,3))); //=> [1,8,27]


//                                         Создание функции из функции без измени

rev = function(array) {
  var res = [];
  for (i = array.length-1; i >= 0; i--){
    res.push(array[i]);
  }
  return res;
}
console.log(rev([1,2,3])) //=> [ 3, 2, 1 ]


















//
