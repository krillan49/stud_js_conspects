//                                                 Функции

// Функции что записаны вне классов называют функциями, а функции что записаны внутри классов называются методами
// В теле функции можно писать условия, циклы, вызов функций, любые операции, единственное что нельзя так это определение функции

// функции из js фаила можно подключать в разные html(каджую функцию в любоу количество страниц) если подключить фаил js в эти html, либо поместить саму функцию в тело тега script
// Функции с одним именем размещенные на разных страницах никак не влияют друг на друга, тк обрабатываются каждая на своей странице. Разные страницы для браузера это как разные приложения независимые друг от друга

function test() {
  // function - ключевое слово для создания функции
  // test() - название функции, в названии нельзя использовать спец символы. () - обязательно даже без параметров
  // {} - обязательно, нет сокращений для 1й строчки кода
	console.log("Вывод чего-либо в консоль");
  console.log("Вывод еше чегото");
}
test(); // Вызов функции, чтобы она отработала
test(); // Можно вызывать многократно


// Функции с параметрами
function test2(word=0) { //  =0  значение по умолчанию
	console.log(word + '!');
}
test2(); //=> 0!
test2('Kroker'); //=> Kroker!


// Вызов одной функции внутри тела другой
function summa(a, b) {
  var res = a + b; // переменная заданная внутри метода, задается заново при новом вызове
  console.log(test2(res)); //=> 12!
}
summa(5, 7);



//                                                 return

function return_test(some_number) {
	some_number *= 2;
	return some_number; // возвращаем результат к оператору вызова, например чтобы поместить его в переменную
}
var res = return_test(6); // теперь в переменной будет 12
console.log('Result: ' + res); //=> Result: 12


// Возврат без переменной
function check(a, x){
  return a.includes(x);
}
var a = [6, 8, 1, 'a'];
check(a, 8); //=> true



//                                      Неопределенное число аргументов

// 1. arguments - объект, который ведет себя аналогично массиву(ES3 или ES5 метод)
function args() {
  return arguments;
}
// соотв в JS не будет ошибки если передавать аргументы в функцию без параметров
console.log(args(1, 2, 3, 4)) //=> [Arguments] { '0': 1, '1': 2, '2': 3, '3': 4 }
console.log(typeof args(1, 2, 3, 4)) //=> object
console.log(args(1, 2, 3, 4)[0]) //=> 1

// 2. Синтаксис остальных параметров(ES6/ES2015) (аналог рубишного *args)
function args(...nums) {
  return nums;
}
console.log(args(1, 2, 3, 4)) //=> [ 1, 2, 3, 4 ]



//                                             => Стрелочные функции

// В одну строку без {}
const last = xs => xs.length == 0 ? null : xs[xs.length-1];
console.log(last([1, 2, 3, 4])); //=> 4

var ArrowFunc = (arr) => arr.map(n => String.fromCharCode(n));
// n каждый элемент массива arr


// Применение стрелочных функций в итераторе
[1,2,3].map(x=>Math.pow(x,3)); //=> [1,8,27]



//                                         Создание функции из функции без измени

rev = function(array) {
  var res = [];
  for (i = array.length-1; i >= 0; i--){
    res.push(array[i]);
  }
  return res;
}
console.log(rev([1,2,3])) //=> [ 3, 2, 1 ]


















//
